<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;


function mine_dev_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {
  $node = \Drupal::routeMatch()->getParameter('node');
  
  if (!empty($node) && $node->getType() == 'collection') {
    if ($view->id() == 'collections' && $display_id == 'next_collection') {
      $current_id = $node->id();

      $query = \Drupal::entityQuery('node')
                ->condition('type', 'collection')
                ->condition('status', 1)
                ->sort('field_weight', 'ASC')
                ->accessCheck(TRUE);
      $all_ids = $query->execute();

      if (in_array($current_id, $all_ids)) {
        $current_index = array_search($current_id, $all_ids);
        $next_index = ($current_index + 1) % count($all_ids);
        $next_id = array_values($all_ids)[$next_index];

        // Additional Debugging for Specific Collection
        if ($current_id == $next_id) {
          \Drupal::logger('my_module')->error('Collection loops to itself. ID: ' . $current_id);
        }

        $args[0] = $next_id;
      } else {
        \Drupal::logger('my_module')->warning('Current ID not found in collections: ' . $current_id);
      }
    }
  }
}



/**
 * Implements hook_entity_view_mode_alter().
 */
function mine_dev_entity_view_mode_alter(string &$view_mode, EntityInterface $entity): void {
  if ($entity instanceof \Drupal\paragraphs\ParagraphInterface) {
    if ($style = $entity->field_style->target_id ?? NULL) {
      $style_entity = EntityViewDisplay::load($style);

      if (!empty($style_entity)) {
        $view_mode = $style_entity->getMode();
      }
    }
  }
}

function mine_dev_form_paragraph_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  $viewmodes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle('paragraph', $entity->bundle());

  $excluded_viewmodes = [
    'preview',
  ];

  $options = [];
  foreach ($viewmodes as $key => $label) {
    if (!in_array($key, $excluded_viewmodes)) {
      $options['paragraph.' . $entity->bundle() . '.' . $key] = $label;
    }
  }

  $form['field_style']['widget']['#options'] = $options;
}

function mine_dev_field_widget_paragraphs_form_alter(&$element, &$form_state, $context) {
  if (isset($element['subform']['field_style'])) {
    $viewmodes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle('paragraph', $element['#paragraph_type']);

    $excluded_viewmodes = [
      'preview',
    ];

    $options = [];
    foreach ($viewmodes as $key => $label) {
      if (!in_array($key, $excluded_viewmodes)) {
        $options['paragraph.' . $element['#paragraph_type'] . '.' . $key] = $label;
      }
    }

    $element['subform']['field_style']['widget']['#options'] = $options;
  }
}

/**
 * Implements hook_form_alter().
 */
function mine_dev_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (($form_id != 'node_page_edit_form' && $form_id != 'node_page_form') || !isset($form['field_paragraphs'])) return;
  $repo = \Drupal::service('entity_display.repository');
  foreach ($form['field_paragraphs']['widget'] as &$item) {
    if (!isset($item['subform']['field_style'])) continue;
    
    $type = $item['#paragraph_type'];
    $viewmodes = $repo->getViewModeOptionsByBundle('paragraph', $type);
    $options = [];
    foreach ($viewmodes as $key => $label) {
      $options["paragraph.$type.$key"] = $label;
    }
    $item['subform']['field_style']['widget']['#options'] = $options;
  }
}